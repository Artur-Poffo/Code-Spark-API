generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique()
  passwordHash    String   @map("password_hash")
  summary         String
  age             Int
  role            Role
  cpf             String   @unique
  profileImageKey String?  @map("profile_image_key")
  bannerImageKey  String?  @map("banner_image_key")
  registeredAt    DateTime @default(now()) @map("registered_at")

  enrollments         Enrollment[]
  studentCertificates StudentCertificate[]
  evaluations         Evaluation[]
  courses             Course[]

  @@map("users")
}

model Course {
  id             String   @id @default(uuid())
  name           String
  description    String
  coverImageKey  String?  @map("cover_image_key")
  bannerImageKey String?  @map("banner_image_key")
  createdAt      DateTime @default(now()) @map("created_at")
  instructor     User     @relation(fields: [instructorId], references: [id])

  courseTags  CourseTag[]
  enrollments Enrollment[]
  modules     Module[]

  certificate  Certificate?
  instructorId String       @map("instructor_id")

  @@map("courses")
}

model Tag {
  id      String   @id @default(uuid())
  value   String   @unique()
  addedAt DateTime @default(now()) @map("added_at")

  courseTags CourseTag[]

  @@map("tags")
}

model CourseTag {
  id         String   @id @default(uuid())
  attachedAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  courseId String @map("course_id")
  tagId    String @map("tag_id")

  @@map("course_tags")
}

model Enrollment {
  id          String    @id @default(uuid())
  ocurredAt   DateTime  @default(now()) @map("ocurred_at")
  completedAt DateTime? @map("completed_at")
  student     User      @relation(fields: [studentId], references: [id])
  course      Course    @relation(fields: [courseId], references: [id])

  enrollmentCompletedItems EnrollmentCompletedItem[]

  studentId String @map("student_id")
  courseId  String @map("course_id")

  @@map("enrollments")
}

enum EnrollmentCompletedItemTypes {
  CLASS
  MODULE
}

model EnrollmentCompletedItem {
  id         String                       @id @default(uuid())
  enrollment Enrollment                   @relation(fields: [enrollmentId], references: [id])
  itemType   EnrollmentCompletedItemTypes @map("item_type")
  itemId     String                       @map("item_id")

  enrollmentId String @map("enrollment_id")

  @@map("enrollment_completed_items")
}

model Evaluation {
  id        String   @id @default(uuid())
  value     Int
  createdAt DateTime @default(now()) @map("created_at")
  student   User     @relation(fields: [studentId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])

  studentId String @map("student_id")
  classId   String @map("class_id")

  @@map("evaluations")
}

model Module {
  id           String @id @default(uuid())
  name         String
  description  String
  moduleNumber Int    @map("module_number")
  course       Course @relation(fields: [courseId], references: [id])

  classes Class[]

  courseId String @map("course_id")

  @@map("modules")
}

model Certificate {
  id       String @id @default(uuid())
  imageKey String @unique() @map("image_key")
  course   Course @relation(fields: [courseId], references: [id])

  studentCertificates StudentCertificate[]

  courseId String @unique @map("course_id")

  @@map("certificates")
}

model StudentCertificate {
  id          String      @id @default(uuid())
  issuedAt    DateTime    @default(now()) @map("issued_at")
  certificate Certificate @relation(fields: [certificateId], references: [id])
  student     User        @relation(fields: [studentId], references: [id])

  certificateId String @map("certificate_id")
  studentId     String @map("student_id")

  @@map("students_certificates")
}

model Class {
  id          String @id @default(uuid())
  name        String
  description String
  classNumber Int    @map("class_number")
  video       Video  @relation(fields: [videoId], references: [id])
  module      Module @relation(fields: [moduleId], references: [id])

  evaluations Evaluation[]

  moduleId String @map("module_id")
  videoId  String @map("video_id")

  @@map("classes")
}

model File {
  id       String   @id @default(uuid())
  name     String
  type     String
  body     Bytes
  key      String   @unique()
  size     Decimal
  storedAt DateTime @default(now()) @map("stored_at")

  video Video?
  Image Image?

  @@map("files")
}

model Video {
  id       String  @id @default(uuid())
  duration Decimal
  file     File?   @relation(fields: [fileKey], references: [key])

  classes Class[]

  fileKey String? @unique() @map("file_key")

  @@map("videos")
}

model Image {
  id   String @id @default(uuid())
  file File?  @relation(fields: [fileKey], references: [key])

  fileKey String? @unique() @map("file_key")

  @@map("images")
}
